name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:  # Додаємо підтримку ручного запуску

jobs:
  terraform_job:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install Terraform
        run: |
          echo "Installing Terraform..."
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/${{ secrets.TF_VERSION }}/terraform_${{ secrets.TF_VERSION }}_linux_amd64.zip
          unzip terraform_${{ secrets.TF_VERSION }}_linux_amd64.zip -d /usr/local/bin/
          chmod +x /usr/local/bin/terraform
          terraform --version  # Check Terraform version

      - name: Terraform Job
        run: |
          echo "Starting Terraform Job"
          echo "Initializing Terraform..."
          cd ${{ secrets.TF_WORKING_DIR }}  # Change to the Terraform directory
          terraform init
          echo "Listing available Terraform workspaces..."
          terraform workspace list  # List available workspaces
          echo "Selecting or creating 'test' workspace..."
          terraform workspace new test || terraform workspace select test  # Create "test" workspace if it doesn't exist, else select it
          echo "Planning Terraform changes..."
          terraform plan
          echo "Applying Terraform changes..."
          terraform apply -auto-approve
          echo "Extracting outputs from Terraform..."
    
          echo "ECR_REPOSITORY_RDS=$(terraform output -raw ecr_repository_rds)" >> variables.env
          echo "ECR_REPOSITORY_REDIS=$(terraform output -raw ecr_repository_redis)" >> variables.env
          
      - name: Verify Files
        run: |
          echo "Checking current directory and files..."
          pwd  # Print the current directory
          ls -la  # Verify the contents of the current directory

      - name: Move Artifacts
        run: |
          mv variables.env ${{ github.workspace }}/ || true  # Move files if they exist
          echo "Listing files to verify variables.env exist..."
          ls -la ${{ github.workspace }}/  # Verify if variables.env and private_key.pem are in the working directory

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: terraform-artifacts
          path: |
            variables.env
            ${{ secrets.TF_WORKING_DIR }}/.terraform
            ${{ secrets.TF_WORKING_DIR }}/terraform.tfstate.d/test/terraform.tfstate

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: terraform_job
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to ECR for backend_rds
        run: |
          aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_RDS }}

      - name: Build and push Docker image for backend_rds
        run: |
          cd backend_rds
          docker build -t backend_rds .  
          docker tag backend_rds:latest ${{ secrets.ECR_REPOSITORY_RDS }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_RDS }}:latest
          cd ..

      - name: Log in to ECR for backend_redis
        run: |
          aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_REDIS }}

      - name: Build and push Docker image for backend_redis
        run: |
          cd backend_redis
          docker build -t backend_redis .
          docker tag backend_redis:latest ${{ secrets.ECR_REPOSITORY_REDIS }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_REDIS }}:latest



  terraform_destroy:
    runs-on: ubuntu-latest
    needs: [terraform_job, docker_build_and_push, deploy_application]
    if: github.event_name == 'workflow_dispatch'  # Запуск вручну
    steps:
      - name: Install Terraform
        run: |
          echo "Installing Terraform..."
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/${{ secrets.TF_VERSION }}/terraform_${{ secrets.TF_VERSION }}_linux_amd64.zip
          unzip terraform_${{ secrets.TF_VERSION }}_linux_amd64.zip -d /usr/local/bin/
          chmod +x /usr/local/bin/terraform
          terraform --version  # Check Terraform version

      - name: Terraform Destroy
        run: |
          echo "Initializing Terraform for destruction..."
          cd ${{ secrets.TF_WORKING_DIR }}  # Change to the Terraform directory
          terraform init  # Re-initialize Terraform to install required plugins
          echo "Selecting 'test' workspace..."
          terraform workspace select test  # Select the "test" workspace
          echo "Destroying Terraform resources..."
          terraform destroy -auto-approve  # Automatically approve destruction
          echo "Cleaning up resources..."
          rm -rf ${{ secrets.TF_WORKING_DIR }}/.terraform  # Remove .terraform directory
          rm -f ${{ secrets.TF_WORKING_DIR }}/terraform.tfstate.d/test/terraform.tfstate  # Remove state file
        
