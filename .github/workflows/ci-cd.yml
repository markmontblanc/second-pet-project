name: Deploy to AWS

on:
  push:
    branches:
      - master  # Automatically triggers only the setup-ecr job
  workflow_dispatch:  # Allows manual triggering for the entire workflow

env:
  AWS_REGION: "eu-north-1"
  ECR_URI_REDIS: "654654200977.dkr.ecr.eu-north-1.amazonaws.com/petp_redis_repo_default:latest"
  ECR_URI_BACKEND: "654654200977.dkr.ecr.eu-north-1.amazonaws.com/petp_rds_repo_default:latest"
  TF_VERSION: "1.9.7"

jobs:
  setup-ecr:
    name: Terraform Apply for ECR Repositories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform
      
      - name: Apply Terraform for ECR Repos
        run: terraform apply -target=aws_ecr_repository.private_repo_redis -target=aws_ecr_repository.private_repo_rds -auto-approve
        working-directory: ./terraform

    

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: setup-ecr
    if: ${{ github.event_name == 'workflow_dispatch' }}  # Makes this job manual
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to ECR for Redis Image
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_URI_REDIS }}

      - name: Build, Tag, and Push Redis Image
        run: |
          cd backend_redis
          docker build -t my-redis-image .
          docker tag my-redis-image:latest ${{ env.ECR_URI_REDIS }}
          docker push ${{ env.ECR_URI_REDIS }}

      - name: Log in to ECR for Backend Image
        run: |
          cd ../backend_rds
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_URI_BACKEND }}

      - name: Build, Tag, and Push Backend Image
        run: |
          docker build -t my-backend-image .
          docker tag my-backend-image:latest ${{ env.ECR_URI_BACKEND }}
          docker push ${{ env.ECR_URI_BACKEND }}

  deploy-ecs:
    name: Terraform Apply for ECS Services
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event_name == 'workflow_dispatch' }}  # Makes this job manual
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform
      
      - name: Apply Terraform for ECS
        run: terraform apply -auto-approve
        working-directory: ./terraform
      
      - name: Upload Terraform State
        uses: actions/upload-artifact@v2
        with:
          name: terraform-state  # Name of the artifact to be stored
          path: |
            ./terraform/.terraform
            ./terraform/terraform.tfstate.d
            ./terraform/terraform.tfstate

    destroy-infrastructure:
    name: Destroy AWS Infrastructure
    runs-on: ubuntu-latest
    needs: deploy-ecs
    if: ${{ github.event_name == 'workflow_dispatch' }}  # Makes this job manual
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform State
        uses: actions/download-artifact@v2
        with:
          name: terraform-state

      - name: Destroy Infrastructure
        run: terraform destroy -auto-approve
        working-directory: ./terraform

